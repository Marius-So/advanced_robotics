import numpy as np
import cv2
import math
import matplotlib.pyplot as plt
# TODO:  might want to do a test wether the data quality is sufficient

def lidar_to_points(sensor_data):
     points = []
     precision = len(sensor_data)
     angle_step = 2 * math.pi / precision

     for idx, dist in enumerate(sensor_data):
        x_coord = math.cos(idx * angle_step) * dist
        y_coord = math.sin(idx * angle_step) * dist

        points.append((float(x_coord), float(y_coord)))
     return np.array(points, dtype=np.float32)

def get_global_coords(sensor_data, wall):
    points = lidar_to_points(sensor_data)
    x=[]
    y=[]

    for e in points:
        x.append(e[0])
        y.append(e[1])

    plt.scatter(x, y)
    plt.show()

    rect = cv2.minAreaRect(points)
    if rect[-2][0] < rect[-2][1]:
        switch_coords = False
        add_rot = 0
        if wall in (1,2):
            #oriented correctly
            add_rot = 0
        else:
            add_rot = math.pi
            #
            # we need to rotate the whole thing by 180 degr
    else:
        switch_coords = True
        if wall in (2,3):
            # need to change x and y!
            add_rot = math.pi/2
            # we need to rot by pos 90 degr
        else:
            add_rot = - math.pi/2
            # we need to rot by neg 90
        # either rot by 90 or - 90
    box = cv2.boxPoints(rect)
    box = np.int0(box)

    x_mean = 0
    y_mean = 0
    rotation = math.radians(rect[-1]) + add_rot
    print(add_rot)
    print(rect)
    print(math.radians(rect[-1]))
    for x,y in box:
        xr,yr = rotate_point(x,y, rotation)
        x_mean += xr/4
        y_mean += yr/4
        #
    print(rotation)

    # neg because they are offsets
    if switch_coords:
        return -y_mean, -x_mean, (rotation + math.pi) % (2*math.pi)
    else:
        return -x_mean, -y_mean, (rotation + math.pi) % (2*math.pi)

def rotate_point(x,y,theta): #rotate x,y around oringin
    xr=math.cos(theta)*(x)-math.sin(theta)*(y)
    yr=math.sin(theta)*(x)+math.cos(theta)*(y)
    return [xr,yr]


if __name__ == '__main__':
    realValues = [194.5, 191.25, 187.0, 186.0, 182.75, 179.75, 176.25, 175.75, 173.25, 172.25, 170.5, 168.0, 165.5, 165.0, 163.25, 161.25, 159.25, 159.0, 157.75, 156.0, 154.75, 154.5, 153.25, 152.25, 152.0, 151.0, 150.0, 149.25, 149.25, 148.5, 148.0, 147.5, 147.5, 147.25, 147.0, 146.25, 146.5, 146.25, 145.5, 146.0, 146.25, 146.0, 146.5, 146.75, 147.25, 147.5, 147.75, 147.75, 148.5, 149.25, 149.5, 150.0, 150.75, 152.0, 152.25, 152.5, 153.75, 155.0, 155.75, 156.25, 158.25, 160.25, 159.5, 160.5, 162.75, 163.5, 164.75, 166.75, 169.0, 169.75, 171.0, 173.5, 177.75, 179.25, 180.0, 181.25, 185.0, 186.75, 188.75, 191.75, 195.5, 197.25, 197.75, 204.0, 208.75, 210.75, 213.75, 218.75, 224.25, 230.5, 240.25, 244.0, 251.25, 247.0, 267.5, 271.25, 277.0, 286.75, 297.25, 302.0, 321.25, 327.5, 335.0, 350.5, 366.25, 383.75, 391.5, 403.0, 425.0, 448.25, 475.75, 507.25, 543.25, 582.25, 604.25, 630.5, 687.5, 754.25, 838.0, 944.5, 1050.0, 992.75, 1092.25, 1093.25, 1088.25, 1086.75, 1088.5, 1085.0, 1083.5, 1080.0, 1085.25, 1087.75, 1088.25, 1087.5, 1089.25, 1091.0, 1093.25, 1096.75, 1104.0, 1102.25, 1103.75, 1111.75, 1116.25, 1118.5, 1122.75, 1131.0, 1134.25, 1139.75, 1152.0, 1160.5, 1167.25, 1174.0, 1182.0, 1195.75, 1199.25, 1210.0, 1225.0, 1239.5, 1248.75, 1252.75, 1271.75, 1295.25, 1301.5, 1312.25, 1337.25, 1343.5, 1355.75, 1383.0, 1408.25, 1422.25, 1435.25, 1383.0, 1432.25, 1415.5, 1395.5, 1364.5, 1350.0, 1335.75, 1303.75, 1276.75, 1268.0, 1253.5, 1228.0, 1220.75, 1208.5, 1187.0, 1169.25, 1158.25, 1152.75, 1141.25, 1124.5, 1117.75, 1104.25, 1088.75, 1083.5, 1077.5, 1065.75, 1053.75, 1047.5, 1043.25, 1035.25, 1030.5, 1028.5, 1018.75, 1012.5, 1010.0, 1007.0, 1002.75, 997.5, 996.75, 993.25, 987.75, 984.5, 984.5, 981.75, 981.0, 980.25, 980.25, 978.0, 977.25, 975.5, 975.0, 978.0, 981.75, 980.25, 983.25, 986.5, 988.5, 990.25, 993.75, 997.25, 998.25, 1004.75, 1010.5, 1013.25, 1014.25, 1023.0, 1033.75, 1033.0, 1045.25, 1048.0, 1059.0, 1066.75, 1071.25, 1083.75, 1091.0, 1104.5, 1108.5, 1123.25, 1133.75, 1138.75, 1156.5, 1174.75, 1186.25, 1194.5, 1214.0, 1234.5, 1250.5, 1260.0, 1282.25, 1278.75, 1259.75, 1249.5, 1201.5, 1194.5, 1180.25, 1154.0, 1127.75, 1117.0, 1106.5, 1082.5, 1072.5, 1062.75, 1042.5, 1023.75, 1014.25, 1006.25, 991.0, 977.5, 969.75, 961.0, 951.0, 942.5, 938.25, 925.75, 914.25, 910.0, 906.5, 898.0, 893.5, 888.75, 881.0, 875.25, 870.5, 867.25, 863.25, 859.25, 859.0, 853.5, 847.5, 847.5, 844.75, 843.25, 842.5, 838.0, 837.5, 835.5, 836.0, 831.25, 834.0, 834.75, 836.25, 839.25, 839.0, 842.0, 842.5, 843.0, 845.5, 848.5, 923.25, 920.5, 642.75, 640.5, 636.0, 607.5, 585.25, 530.5, 501.75, 485.75, 462.0, 448.75, 417.0, 399.0, 387.75, 373.75, 364.25, 343.75, 334.25, 324.25, 314.5, 307.5, 293.25, 285.25, 279.5, 269.0, 267.75, 256.75, 258.25, 242.0, 238.0, 233.5, 230.25, 223.75, 222.25, 214.0, 215.5, 203.5, 206.25, 200.25, 195.5]
    print(get_global_coords(realValues, 3))

